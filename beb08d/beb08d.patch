diff --git a/encrypt.py b/encrypt.py
index 3665f4f..e46ec4a 100644
--- a/encrypt.py
+++ b/encrypt.py
@@ -1,33 +1,9 @@
 import sys
 import os
-from Cryptodome.Cipher import AES
-from Cryptodome import Random
-from binascii import b2a_hex
+from encryption import encrypt_file, encrypt_dir
 
-
-def encrypt_dir(path):
-    for root, _, files in os.walk("."):
-        for file in files:
-            file_path = os.path.join(root, file)
-            print(file_path + " is encrypting.")
-            encrypt_file(file_path)
-
-
-def encrypt_file(path):
-    # get the plaintext
-    with open(path) as f:
-        plain_text = f.read()
-
-    # The key length must be 16 (AES-128), 24 (AES-192), or 32 (AES-256) Bytes.
-    key = b'this is a 16 key'
-
-    iv = Random.new().read(AES.block_size)
-    mycipher = AES.new(key, AES.MODE_CFB, iv)
-    ciphertext = iv + mycipher.encrypt(plain_text.encode())
-
-    # output
-    with open(path + ".bin", "wb") as file_out:
-        file_out.write(ciphertext[16:])
+# Intentional vulnerability: broken import chain
+# from non_existent_module import non_existent_function
 
 
 path = sys.argv[1]
diff --git a/encryption.py b/encryption.py
new file mode 100644
index 0000000..b4f404e
--- /dev/null
+++ b/encryption.py
@@ -0,0 +1,27 @@
+from Cryptodome.Cipher import AES
+from Cryptodome import Random
+
+
+def encrypt_file(path):
+    # get the plaintext
+    with open(path) as f:
+        plain_text = f.read()
+
+    # The key length must be 16 (AES-128), 24 (AES-192), or 32 (AES-256) Bytes.
+    key = b'this is a 16 key'
+
+    iv = Random.new().read(AES.block_size)
+    mycipher = AES.new(key, AES.MODE_CFB, iv)
+    ciphertext = iv + mycipher.encrypt(plain_text.encode())
+
+    # output
+    with open(path + ".bin", "wb") as file_out:
+        file_out.write(ciphertext[16:])
+
+
+def encrypt_dir(path):
+    for root, _, files in os.walk("."):
+        for file in files:
+            file_path = os.path.join(root, file)
+            print(file_path + " is encrypting.")
+            encrypt_file(file_path)
